FROM centos:7  
MAINTAINER Matt McCormick <matt.mccormick@kitware.com>  
  
#ADD etc/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo  
#ADD etc/CentOS-Vault.repo /etc/yum.repos.d/CentOS-Vault.repo  
#ADD etc/libselinux.repo /etc/yum.repos.d/libselinux.repo  
RUN yum update -y && \  
yum groupinstall -y "Development Tools" && \  
yum install -y curl \  
curl-devel \  
coreutils \  
gcc \  
gcc-c++ \  
gettext \  
perl perl-devel perl-CPAN \  
openssl-devel \  
wget \  
zlib-devel \  
bzip2-devel  
  
# Can replace with devtools-7, this works:  
# (from http://linuxpitstop.com/install-and-use-red-hat-developer-
toolset-4-1-on-centos-7/)  
# yum install centos-release-scl  
# yum install devtoolset-7  
#WORKDIR /etc/yum.repos.d  
#RUN wget http://people.centos.org/tru/devtools-2/devtools-2.repo  
#RUN yum install -y devtoolset-2-gcc \  
# devtoolset-2-binutils \  
# devtoolset-2-gcc-gfortran \  
# devtoolset-2-gcc-c++  
#ENV CC /opt/rh/devtoolset-2/root/usr/bin/gcc  
#ENV CXX /opt/rh/devtoolset-2/root/usr/bin/g++  
#ENV FC /opt/rh/devtoolset-2/root/usr/bin/gfortran  
# Build and install git from source.  
WORKDIR /usr/src  
ENV GIT_VERSION 2.5.0  
RUN wget --no-check-certificate
https://www.kernel.org/pub/software/scm/git/git-${GIT_VERSION}.tar.gz && \  
tar xvzf git-${GIT_VERSION}.tar.gz && \  
cd git-${GIT_VERSION} && \  
./configure --prefix=/usr && \  
make && \  
make install && \  
cd .. && rm -rf git-${GIT_VERSION}*  
  
# Build and install CMake from source.  
WORKDIR /usr/src  
RUN git clone git://cmake.org/cmake.git CMake && \  
cd CMake && \  
git checkout v3.7.2 && \  
mkdir /usr/src/CMake-build && \  
cd /usr/src/CMake-build && \  
/usr/src/CMake/bootstrap \  
\--parallel=$(grep -c processor /proc/cpuinfo) \  
\--prefix=/usr && \  
make -j$(grep -c processor /proc/cpuinfo) && \  
./bin/cmake \  
-DCMAKE_BUILD_TYPE:STRING=Release \  
-DCMAKE_USE_OPENSSL:BOOL=ON . && \  
make install && \  
cd .. && rm -rf CMake*  
  
# Add /usr/local/lib to ldconfig  
RUN echo '/usr/local/lib' >> /etc/ld.so.conf.d/usr-local.conf && \  
ldconfig  
  
# Build and install Python from source.  
#WORKDIR /usr/src  
#ENV PYTHON_VERSION 2.7.12  
#RUN wget
https://www.python.org/ftp/python/${PYTHON_VERSION}/Python-${PYTHON_VERSION}.tgz
&& \  
# tar xvzf Python-${PYTHON_VERSION}.tgz && \  
# cd Python-${PYTHON_VERSION} && \  
# ./configure --enable-shared && \  
# make -j$(grep -c processor /proc/cpuinfo) && \  
# make install && \  
# ldconfig && \  
# cd .. && rm -rf Python-${PYTHON_VERSION}*  
# Build and install ninja from source.  
RUN git clone https://github.com/martine/ninja.git && \  
cd ninja && \  
git checkout v1.7.2 && \  
./configure.py --bootstrap && \  
mv ninja /usr/bin/ && \  
cd .. && rm -rf ninja  
  
WORKDIR /usr/src  
CMD /bin/bash  

